{"version":3,"sources":["assets/red.fw.png","assets/blue.fw.png","assets/green.fw.png","assets/yellow.fw.png","assets/orange.fw.png","assets/cyan.fw.png","assets/purple.fw.png","assets/blank.fw.png","serviceWorker.ts","components/Tile.tsx","components/Board.tsx","classes/Grid.tsx","components/config/Config.tsx","components/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Tile","colour","this","props","no","blue","red","green","yellow","orange","cyan","purple","blank","onClick","src","alt","React","Board","rowNo","colNo","jsx","_","forEach","grid","r","rowKey","jsxRow","c","cellKey","push","onTileClick","key","className","Component","Grid","dataParam","data","cloneDeep","row","col","size","length","rv","newData","getData","selectedColour","adjacentTiles","getAdjacentTiles","filter","fringe","poppedTile","pop","tile","selectedRow","selectedCol","e","unzip","i","displacement","j","val","reduce","a","x","clone","map","Text","Typography","Config","onRandomiseGridClick","type","span","gridSize","min","max","onChange","onGridSizeChange","value","blockCount","onBlockCountChange","Title","CenteringStyle","display","justifyContent","StyledBoard","styled","StyledHeading","App","state","undefined","startingGrid","randomiseGrid","mount","numberGrid","random","setState","select","numValue","parseInt","toString","level","xs","md","pull","bind","style","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9c13bc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/red.fw.1ddc275d.png\";","module.exports = __webpack_public_path__ + \"static/media/blue.fw.6c33a757.png\";","module.exports = __webpack_public_path__ + \"static/media/green.fw.c857b8ef.png\";","module.exports = __webpack_public_path__ + \"static/media/yellow.fw.57c30b6e.png\";","module.exports = __webpack_public_path__ + \"static/media/orange.fw.5a79c073.png\";","module.exports = __webpack_public_path__ + \"static/media/cyan.fw.d2cdd8c8.png\";","module.exports = __webpack_public_path__ + \"static/media/purple.fw.661f2f96.png\";","module.exports = __webpack_public_path__ + \"static/media/blank.fw.b8bd58ca.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\r\n\r\nimport red from \"../assets/red.fw.png\";\r\nimport blue from \"../assets/blue.fw.png\";\r\nimport green from \"../assets/green.fw.png\";\r\nimport yellow from \"../assets/yellow.fw.png\";\r\nimport orange from \"../assets/orange.fw.png\";\r\nimport cyan from \"../assets/cyan.fw.png\";\r\nimport purple from \"../assets/purple.fw.png\";\r\nimport blank from \"../assets/blank.fw.png\";\r\n\r\ninterface Props {\r\n    no: number;\r\n    onClick: (no: number) => void;\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\nexport class Tile extends React.Component<Props, State> {\r\n    render(): React.ReactElement<any> {\r\n        let colour: string;\r\n        switch (this.props.no)\r\n        {\r\n            case 1:\r\n                colour = blue;\r\n                break;\r\n            case 2:\r\n                colour = red;\r\n                break;\r\n            case 3:\r\n                colour = green;\r\n                break;\r\n            case 4:\r\n                colour = yellow;\r\n                break;\r\n            case 5:\r\n                colour = orange;\r\n                break;\r\n            case 6:\r\n                colour = cyan;\r\n                break;\r\n            case 7:\r\n                colour = purple;\r\n                break;\r\n            default:\r\n                colour = blank;\r\n                break;\r\n        }\r\n\r\n        return (<td>\r\n            <img\r\n                onClick={() => this.props.onClick(this.props.no)}\r\n                //onMouseEnter={() => alert(this.props.no)}\r\n                src={colour}\r\n                alt={\"\" + this.props.no}\r\n            />\r\n        </td>);\r\n    }\r\n}","import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nimport { Tile } from \"./Tile\";\r\n\r\ninterface Props {\r\n    grid: number[][];\r\n    onClick: (r: number, c: number) => void;\r\n    className?: string;\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\nexport class Board extends React.Component<Props, State> {\r\n    /**\r\n     * When user clicks on a tile\r\n     * @param rowNo - the row of the tile clicked\r\n     * @param colNo - the column of the tile clicked\r\n     */\r\n    onTileClick(rowNo: number, colNo: number): void {\r\n        this.props.onClick(rowNo, colNo);\r\n    }\r\n\r\n    render(): React.ReactElement<any> {\r\n        // Declares JSX array to render\r\n        let jsx: React.ReactElement<any>[] = [];\r\n\r\n        // For every row\r\n        _.forEach(this.props.grid, (r: number[], rowKey: number) => {\r\n            // Create our jsx row\r\n            let jsxRow: React.ReactElement<any>[] = [];\r\n\r\n            // For every cell in the row\r\n            _.forEach(r, (c: number, cellKey: number) => {\r\n                // Add a cell\r\n                jsxRow.push(<Tile\r\n                    onClick={() => this.onTileClick(rowKey, cellKey)}\r\n                    no={c}\r\n                    key={2 ** rowKey * 3 ** cellKey}\r\n                />);\r\n            });\r\n\r\n            // Add row to our table\r\n            jsx.push(<tr key={rowKey}>{ jsxRow }</tr>);\r\n        });\r\n\r\n        // Renders jsx\r\n        return (<table className={this.props.className}>\r\n            <tbody>{jsx}</tbody>\r\n        </table>);\r\n    }\r\n}","import _ from \"lodash\";\r\n\r\n/**\r\n * The grid that handles the game state\r\n */\r\nexport class Grid {\r\n    /**\r\n     * Grid in number form\r\n     */\r\n    private readonly data: number[][];\r\n\r\n    constructor(dataParam: number[][]) {\r\n        this.data = dataParam;\r\n    }\r\n\r\n    /**\r\n     * Returns copied data\r\n     */\r\n    getData(): number[][] {\r\n        return _.cloneDeep(this.data);\r\n    }\r\n\r\n    /**\r\n     * Gets adjacent tile positions\r\n     * @param row - the row of the tile\r\n     * @param col - the column of the tile\r\n     */\r\n    getAdjacentTiles(row: number, col: number): [number, number][] {\r\n        let size = this.data.length;\r\n        let rv: [number, number][] = [];\r\n        \r\n        // Checks left\r\n        if (col > 0)\r\n            rv.push([row, col - 1]);\r\n        // Checks right\r\n        if (col < size - 1)\r\n            rv.push([row, col + 1]);\r\n        // Checks up\r\n        if (row > 0)\r\n            rv.push([row - 1, col]);\r\n        // Checks down\r\n        if (row < size - 1)\r\n            rv.push([row + 1, col]);\r\n            \r\n        return rv;\r\n    }\r\n\r\n    /**\r\n     * Selects a position, and removes the group, if it can\r\n     * @param row - the row to select on\r\n     * @param col - the column, to select on\r\n     * @returns a new Grid where the tile has been selected\r\n     */\r\n    select(row: number, col: number): Grid {\r\n        // Gets data to edit\r\n        let newData: number[][] = this.getData();\r\n        \r\n        // Gets the colour to dispose of\r\n        let selectedColour: number = newData[row][col];\r\n\r\n        // If we just clicked on nothing, do nothing\r\n        if (selectedColour === 0)\r\n            return new Grid(newData);\r\n\r\n        // If this group is only one tile big, do nothing\r\n        let adjacentTiles = this.getAdjacentTiles(row, col);\r\n        adjacentTiles = _.filter(adjacentTiles, ([r, c]) => newData[r][c] === selectedColour);\r\n        if (adjacentTiles.length === 0)\r\n            return new Grid(newData);\r\n\r\n        // Gets size of grid\r\n        let size: number = newData.length;\r\n\r\n        // Stores a fringe of tiles that have this colour and are connected to our selected one\r\n        let fringe: [number, number][] = [ [row, col] ];\r\n\r\n        // While there's still tiles to get rid of\r\n        while (fringe.length > 0)\r\n        {\r\n            // Pop next tile off the fringe\r\n            let poppedTile: any = fringe.pop();\r\n            if (poppedTile)\r\n            {\r\n                let tile: [number, number] = poppedTile;\r\n\r\n                // Gets row and column\r\n                let [ selectedRow, selectedCol ] = tile;\r\n\r\n                // Removes it\r\n                newData[selectedRow][selectedCol] = 0;\r\n\r\n                // Gets adjacent tiles\r\n                let adjacentTiles = this.getAdjacentTiles(selectedRow, selectedCol);\r\n\r\n                // Filters out tiles that aren't our colour\r\n                adjacentTiles = _.filter(adjacentTiles, ([r, c]) => newData[r][c] === selectedColour);\r\n\r\n                // Adds these to the fringe\r\n                _.forEach(adjacentTiles, e => fringe.push(e));\r\n            }\r\n            else\r\n                break;\r\n        }\r\n\r\n        // Temporarily transposes the grid\r\n        newData = _.unzip(newData);\r\n\r\n        // For every row (moving tiles down)\r\n        for (let i = 0; i < size; i++)\r\n        {\r\n            // Stores displacement\r\n            let displacement = 0;\r\n\r\n            // Start from the bottom, work our way up\r\n            for (let j = size - 1; j >= 0; j--)\r\n            {\r\n                // If this is 0, increase displacement\r\n                if (newData[i][j] === 0)\r\n                    displacement++;\r\n                else {\r\n                    let val = newData[i][j];\r\n                    newData[i][j] = 0;\r\n                    newData[i][j + displacement] = val;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Stores displacement\r\n        let displacement = 0;\r\n\r\n        // For every row (moving rows to the right)\r\n        for (let i = size - 1; i >= 0; i--)\r\n        {\r\n            // If this row is all zeroes\r\n            if (_.reduce(newData[i], (a, x) => a + x, 0) === 0)\r\n                displacement++;\r\n            else {\r\n                let val = _.clone(newData[i]);\r\n                newData[i] = _.map(newData[i], x => 0);\r\n                newData[i + displacement] = val;\r\n            }\r\n        }\r\n\r\n        // Transposes the grid back again\r\n        newData = _.unzip(newData);\r\n\r\n        // Returns grid\r\n        return new Grid(newData);\r\n    }\r\n}","import * as React from \"react\";\r\nimport {Button, Col, Slider, Typography, Row} from \"antd\";\r\nimport { SliderValue } from \"antd/lib/slider\";\r\nimport styled from \"styled-components\";\r\n\r\nconst {Text} = Typography;\r\n\r\ninterface Props {\r\n    gridSize: number;\r\n    blockCount: number;\r\n    onGridSizeChange: (e: SliderValue) => void;\r\n    onBlockCountChange: (e: SliderValue) => void;\r\n    onRandomiseGridClick: () => void;\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\nexport class Config extends React.Component<Props, State> {\r\n    render(): React.ReactElement<any> {\r\n        return (<div>\r\n            <Button\r\n                onClick={this.props.onRandomiseGridClick}\r\n                type=\"primary\"\r\n            >Randomise grid</Button>\r\n\r\n            <Row>\r\n                <Col span={11}>\r\n                    <Text>Grid size ({this.props.gridSize})</Text>\r\n                    <Slider\r\n                        min={3}\r\n                        max={15}\r\n                        onChange={this.props.onGridSizeChange}\r\n                        value={this.props.gridSize}\r\n                    />\r\n                </Col>\r\n                <Col span={2} />\r\n                <Col span={11}>\r\n                    <Text>Block count ({this.props.blockCount})</Text>\r\n                    <Slider\r\n                        min={2}\r\n                        max={7}\r\n                        onChange={this.props.onBlockCountChange}\r\n                        value={this.props.blockCount}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </div>);\r\n    }\r\n}","import React from 'react';\nimport _ from 'lodash';\nimport styled from \"styled-components\";\n\nimport { Slider, Typography, Button, Row, Col } from 'antd';\n\nimport { Board } from \"./Board\";\nimport { Grid } from \"../classes/Grid\";\nimport { Config } from \"./config/Config\";\n\nimport './App.css';\nimport { SliderValue } from 'antd/lib/slider';\n\nconst { Title, Text } = Typography;\n\ninterface Props {\n    startingGrid?: Grid\n}\n\ninterface State {\n    grid: Grid;\n    gridSize: number;\n    blockCount: number;\n}\n\n/**\n * Uses flex box to center stuff\n */\nconst CenteringStyle = {\n    display: \"flex\",\n    justifyContent: \"center\"\n};\n\nconst StyledBoard = styled(Board)`\n    margin: 10px;\n`;\n\nconst StyledHeading = styled(Title)`\n    margin-top: 20px;\n`;\n\nclass App extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        // Sets up grid\n        this.state = {\n            grid: this.props.startingGrid !== undefined ? this.props.startingGrid : this.randomiseGrid(10, 4, true),\n            gridSize: 10,\n            blockCount: 4\n        };\n    }\n\n    /**\n     * Randomises the grid\n     */\n    randomiseGrid(size: number, blockCount: number, mount: boolean): Grid {\n        // Creates a number grid\n        let numberGrid: number[][] = [];\n\n        for (let i = 0; i < size; i++)\n        {\n            numberGrid.push([]);\n            for (let j = 0; j < size; j++)\n            {\n                numberGrid[i].push(_.random(1,blockCount));\n            }\n        }\n\n        let grid = new Grid(numberGrid);\n        if (!mount)\n            this.setState({\n                grid: new Grid(numberGrid)\n            });\n        return grid;\n    }\n\n    /**\n     * When user clicks on a tile\n     * @param row - the row of the tile clicked\n     * @param col - the column of the tile clicked\n     */\n    onTileClick(row: number, col: number): void {\n        this.setState({\n            ...this.state,\n            grid: this.state.grid.select(row, col)\n        })\n    }\n\n    /**\n     * When we change the grid size\n     * @param value what to change the grid size to\n     */\n    onGridSizeChange(value: SliderValue): void {\n        let numValue: number = parseInt(value.toString());\n        this.randomiseGrid(numValue, this.state.blockCount, false);\n        this.setState({\n            gridSize: numValue\n        });\n    }\n\n    /**\n     * When we change the block count\n     * @param value what to change the block count to\n     */\n    onBlockCountChange(value: SliderValue): void {\n        let numValue: number = parseInt(value.toString());\n        this.randomiseGrid(this.state.gridSize, numValue, false);\n        this.setState({\n            blockCount: numValue\n        });\n    }\n\n    render(): React.ReactElement<any> {\n        return (\n            <div className=\"App\">\n                <StyledHeading>SameGame for React</StyledHeading>\n                <Title level={2}>by Matthew Barnes</Title>\n\n                <Row>\n                    <Col xs={0} md={4} />\n                    <Col xs={{span: 24, pull: 0}} md={{span: 6, push: 10}}>\n                        <Config\n                            gridSize={this.state.gridSize}\n                            blockCount={this.state.blockCount}\n                            onRandomiseGridClick={() => this.randomiseGrid(this.state.gridSize, this.state.blockCount, false)}\n                            onGridSizeChange={this.onGridSizeChange.bind(this)}\n                            onBlockCountChange={this.onBlockCountChange.bind(this)}\n                        />\n                    </Col>\n                    <Col xs={{span: 24, push: 0}} md={{span: 10, pull: 6}} style={CenteringStyle}>\n                        <StyledBoard\n                            onClick={this.onTileClick.bind(this)}\n                            grid={this.state.grid.getData()}\n                        />\n                    </Col>\n                    <Col xs={0} md={4} />\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './components/App';\n\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}